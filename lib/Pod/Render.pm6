#! /usr/bin/env perl6
use v6.c;
use Pod::Cached;
use Template::Mustache;

unit class Pod::Cached::Render is Pod::Cached;

=begin pod
=TITLE Rendering pod

This module provide functionality to take precompiled pod and generate
output based on templates. The default templates are for html and for a separate
HTML file for each source pod.

=begin SYNOPSIS

    use Pod::Render;

    my Pod::Render $renderer .= new(
        :path<path-to-pod-cache>,
        :templates<path-to-templates>,
        :output<path-to-output>,
        :rendering<html>,
        :!verbose );

=end SYNOPSIS
=item new
    - instantiates object and verifies cache is present
    - creates or empties the output directory
    - verifies that <templates>/<rendering> directory exists and contains
        a full set of templates

=item path
    - location of perl6 compunit cache, as generated by Pod::Cached
    - defaults to 'pod-cache'

=item templates
    - location of templates root directory
    - defaults to 'resources/templates', which is where a complete set of templates exists

=item output
    - the path where output is sent
    - default is a directory with the same name as C<rendering>

=item rendering
    - the type of rendering chosen
    - default is html, and refers to templates/html in which a complete set of templates exists
    - any other valid directory name can be used, eg md, so long as templates/md contains
    a complete set of templates

=end pod

has $!templates;
has $!rendering;
has @!template-list = <main>; # list of all the templates needed
has $!output;

submethod BUILD(
    :$!templates = 'resources/templates',
    :$!rendering = 'html',
    :$!output = $!rendering
    ) {
        self.check-things;
    }

method check-things {
    die 'No files in cache' unless +%.files.keys;
}
